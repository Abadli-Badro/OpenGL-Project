// In vertex shader (SimpleVertexShader2.vertexshader)
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;  // Add normal vector attribute
layout (location = 2) in vec2 aTexCoord;
layout (location = 3) in int aTextureIndex;  // Texture index attribute

uniform mat4 MVP;
uniform mat4 model;  // Model matrix
uniform mat4 view;   // View matrix
uniform mat4 projection; // Projection matrix

out vec3 FragPos;    // Position of the fragment in world space
out vec3 Normal;     // Normal vector in world space
out vec2 vTexture;
flat out int TextureIndex;

void main()
{
    gl_Position = MVP * vec4(aPos, 1.0);
    FragPos = vec3(model * vec4(aPos, 1.0));  // Calculate fragment position in world space
    Normal = mat3(transpose(inverse(model))) * aNormal;  // Correctly transform normal vector
    vTexture = aTexCoord;   // Forward texture coordinates to fragment shader
    TextureIndex = aTextureIndex;
}