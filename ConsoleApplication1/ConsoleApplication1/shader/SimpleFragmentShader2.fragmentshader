// In fragment shader (SimpleFragmentShader2.fragmentshader)
#version 330 core
out vec4 FragColor;

in vec3 FragPos;    // Position of the fragment in world space
in vec3 Normal;     // Normal vector in world space
in vec2 vTexture;
flat in int TextureIndex;

uniform sampler2D textures[4];  // Texture samplers
uniform vec3 lightPos;  // Position of the light
uniform vec3 viewPos;   // Position of the camera/viewer
uniform vec3 lightColor; // Color of the light
uniform vec3 ambientColor; // Ambient color

void main()
{
    // Ambient lighting
    float ambientIntensity = 5.0f;
    vec3 ambient = ambientIntensity * ambientColor * lightColor;

    // Diffuse lighting
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // Specular lighting
    float shininess = 16.0;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = spec * lightColor;

    vec3 result = ambient + diffuse;

    vec4 texColor;
    switch(TextureIndex) {
        case 0: texColor = texture(textures[0], vTexture); break;
        case 1: texColor = texture(textures[1], vTexture); break;
        default: texColor = vec4(1.0, 0.0, 1.0, 1.0); // Magenta for error
    }

    FragColor = vec4(result, 1.0) * texColor;
}